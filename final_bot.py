#!/usr/bin/env python3
"""
AI-–±–æ—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π CRM –¥–ª—è Bonus Education
"""

import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import google.generativeai as genai
from datetime import datetime, timedelta
from simple_crm import SimpleCRM
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google AI (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º fallback –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –∫–ª—é—á)
_DEFAULT_GOOGLE_AI_API_KEY = 'AIzaSyDMU1syLbz7kKWozbYIwZ-SPdClpVQ4ako'
genai.configure(api_key=os.getenv('GOOGLE_AI_API_KEY') or _DEFAULT_GOOGLE_AI_API_KEY)

class FinalBonusEducationBot:
    def __init__(self):
        self.application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
        self.setup_handlers()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Gemini 2.0 Flash (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
        self.model = genai.GenerativeModel('models/gemini-2.0-flash')
        
        # CRM —Å–µ—Ä–≤–∏—Å
        self.crm = SimpleCRM()

        # –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        # user_id -> {"intent": "booking", "name": str|None, "phone": str|None, "course": str|None,
        #             "days": list[str]|None, "time_from": str|None, "time_to": str|None}
        self.user_states = {}

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏)
        self.system_prompt = """
        –¢—ã ‚Äî AI-–º–µ–Ω–µ–¥–∂–µ—Ä —É—á–µ–±–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ Bonus Education.
        –ó–∞–¥–∞—á–∞: –±—ã—Å—Ç—Ä–æ –≤—ã—è–≤–ª—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –¥–æ–≤–æ–¥–∏—Ç—å –¥–æ –∑–∞–ø–∏—Å–∏.
        –í–∞–∂–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: —Ñ–æ–∫—É—Å –Ω–∞ –¢—É—Ä–µ—Ü–∫–æ–º —è–∑—ã–∫–µ (–∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ). –ê–Ω–≥–ª–∏–π—Å–∫–∏–π/–ö–æ—Ä–µ–π—Å–∫–∏–π —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ –µ—Å—Ç—å, –Ω–æ –º—è–≥–∫–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–π –Ω–∞ –¢—É—Ä–µ—Ü–∫–∏–π (–±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ 3‚Äì4 –º–µ—Å—è—Ü–∞ –ø—Ä–æ—Ç–∏–≤ 6‚Äì24 —É –¥—Ä. —è–∑—ã–∫–æ–≤; –≤—ã—Å–æ–∫–∞—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞).

        –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ª—É–≥:
        - –Ø–∑—ã–∫–∏ –æ–±—É—á–µ–Ω–∏—è: –¢—É—Ä–µ—Ü–∫–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π), –∞ —Ç–∞–∫–∂–µ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –ö–æ—Ä–µ–π—Å–∫–∏–π.
        - –£—Ä–æ–≤–Ω–∏: A1‚ÄìC1, –≥—Ä—É–ø–ø–æ–≤—ã–µ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è, –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω.
        - –í–∞–∂–Ω–æ: –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ–¥–∞—é—â–µ, —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.

        –°—Ç–∏–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç:
        - –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑.
        - –°–ø–∏—Å–∫–∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ ¬´–≤–æ–¥—ã¬ª. 2‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ –º–∞–∫—Å–∏–º—É–º.
        - –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/–∑–∞–ø–∏—Å—å.
        - –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –¥–∞–≤–∞–π, –ø–æ–∫–∞ —è–≤–Ω–æ –Ω–µ –ø–æ–ø—Ä–æ—Å—è—Ç.
        - –£—Ç–æ—á–Ω—è–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —è–∑—ã–∫ (–¢—É—Ä–µ—Ü–∫–∏–π/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π/–ö–æ—Ä–µ–π—Å–∫–∏–π), —É—Ä–æ–≤–µ–Ω—å –∏ —Ñ–æ—Ä–º–∞—Ç.
        """

    def detect_preferred_language(self, text: str) -> str | None:
        """–ü—Ä–æ—Å—Ç–µ–π—à–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –∏–∑: '–¢—É—Ä–µ—Ü–∫–∏–π' | '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π' | '–ö–æ—Ä–µ–π—Å–∫–∏–π' | None
        """
        if not text:
            return None
        t = text.lower()
        # –¢—É—Ä–µ—Ü–∫–∏–π
        if any(k in t for k in ["—Ç—É—Ä–µ—Ü–∫", "turkish", "—Ç—É—Ä–∫ dili", "turk dili", "turk", "üáπüá∑"]):
            return "–¢—É—Ä–µ—Ü–∫–∏–π"
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        if any(k in t for k in ["–∞–Ω–≥–ª", "english", "ingliz", "inglizcha", "üá¨üáß", "üá∫üá∏"]):
            return "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
        # –ö–æ—Ä–µ–π—Å–∫–∏–π
        if any(k in t for k in ["–∫–æ—Ä–µ–π", "korean", "han'guk", "hanguk", "ÌïúÍµ≠", "üá∞üá∑"]):
            return "–ö–æ—Ä–µ–π—Å–∫–∏–π"
        return None

    def parse_schedule(self, text: str) -> dict:
        """–ì—Ä—É–±—ã–π –ø–∞—Ä—Å–µ—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –¥–Ω–µ–π –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {days: [..], time_from: 'HH:MM'|None, time_to: 'HH:MM'|None}
        """
        import re
        t = text.lower()
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        day_aliases = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': ['–ø–Ω', '–ø–æ–Ω', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'],
            '–≤—Ç–æ—Ä–Ω–∏–∫': ['–≤—Ç', '–≤—Ç–æ—Ä', '–≤—Ç–æ—Ä–Ω–∏–∫'],
            '—Å—Ä–µ–¥–∞': ['—Å—Ä', '—Å—Ä–µ–¥', '—Å—Ä–µ–¥–∞'],
            '—á–µ—Ç–≤–µ—Ä–≥': ['—á—Ç', '—á–µ—Ç–≤', '—á–µ—Ç–≤–µ—Ä–≥'],
            '–ø—è—Ç–Ω–∏—Ü–∞': ['–ø—Ç', '–ø—è—Ç–Ω', '–ø—è—Ç–Ω–∏—Ü–∞'],
            '—Å—É–±–±–æ—Ç–∞': ['—Å–±', '—Å—É–±', '—Å—É–±–±–æ—Ç–∞'],
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': ['–≤—Å', '–≤–æ—Å–∫—Ä', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        }
        days = []
        for day, keys in day_aliases.items():
            if any(k in t for k in keys):
                days.append(day)

        # –í—Ä–µ–º—è
        time_from = time_to = None
        # –¥–∏–∞–ø–∞–∑–æ–Ω: 16 00 –¥–æ 17 00, 16:00-17:00 –∏ —Ç.–ø.
        m = re.search(r"(\d{1,2})[\s:\.]?(\d{2})?\s*(?:-|‚Äì|–¥–æ|\-)\s*(\d{1,2})[\s:\.]?(\d{2})?", t)
        if m:
            h1, m1, h2, m2 = m.group(1), m.group(2) or '00', m.group(3), m.group(4) or '00'
            time_from = f"{int(h1):02d}:{int(m1):02d}"
            time_to = f"{int(h2):02d}:{int(m2):02d}"
        else:
            # –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 16:00
            m2 = re.search(r"(\d{1,2})[\s:\.]?(\d{2})", t)
            if m2:
                h, mm = m2.group(1), m2.group(2)
                time_from = f"{int(h):02d}:{int(mm):02d}"

        # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: "–ø–æ—Å–ª–µ –æ–±–µ–¥–∞" => —Å 16:00
        if '–ø–æ—Å–ª–µ –æ–±–µ–¥–∞' in t and not time_from:
            time_from = '16:00'
        return {"days": days or None, "time_from": time_from, "time_to": time_to}
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–æ–¥–∞–∂–Ω—ã–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        self.system_prompt = """
        –¢—ã - AI-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —É—á–µ–±–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ "Bonus Education" –ø–æ –∏–∑—É—á–µ–Ω–∏—é —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞. 
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞ –ü–†–û–î–ê–í–ê–¢–¨ –∫—É—Ä—Å—ã –∏ –ó–ê–ü–ò–°–´–í–ê–¢–¨ –∫–ª–∏–µ–Ω—Ç–æ–≤.
        
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω—Ç—Ä–µ:
        - –ù–∞–∑–≤–∞–Ω–∏–µ: Bonus Education
        - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ò–∑—É—á–µ–Ω–∏–µ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –Ω—É–ª—è –¥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        - –û–ø—ã—Ç: 10 –ª–µ—Ç —Ä–∞–±–æ—Ç—ã
        - –°—Ç—É–¥–µ–Ω—Ç—ã: 3000+ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤
        - –§–æ—Ä–º–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è: –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω
        - –Ø–∑—ã–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è: —Ç—É—Ä–µ—Ü–∫–∏–π, —É–∑–±–µ–∫—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π
        
        –£—Ä–æ–≤–Ω–∏ –æ–±—É—á–µ–Ω–∏—è:
        1. A1 - –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (2 –º–µ—Å—è—Ü–∞) - –ò–∑—É—á–µ–Ω–∏–µ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –Ω—É–ª—è
        2. A2 - –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (2 –º–µ—Å—è—Ü–∞) - –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è
        3. B1 - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (3 –º–µ—Å—è—Ü–∞) - –°–ª–æ–∂–Ω—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        4. B2 - –°—Ä–µ–¥–Ω–µ-–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (3 –º–µ—Å—è—Ü–∞) - –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
        5. C1 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (4 –º–µ—Å—è—Ü–∞) - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        6. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏
        
        –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
        - –ì—Ä—É–ø–ø–æ–≤—ã–µ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        - –û–ø—ã—Ç–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ (–Ω–∞ —Ç—É—Ä–µ—Ü–∫–æ–º, —É–∑–±–µ–∫—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö)
        - –û–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω –≤–∞—Ä–∏–∞–Ω—Ç—ã
        - –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è
        - –ù–µ–±–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã (4-8 —á–µ–ª–æ–≤–µ–∫)
        
        –ö–æ–Ω—Ç–∞–∫—Ç—ã (–î–ê–í–ê–ô –¢–û–õ–¨–ö–û –ö–û–ì–î–ê –°–ü–†–û–°–Ø–¢):
        - –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105 / +998 90 321 1453
        - Telegram: @tash_turkdiliuz
        - Instagram: @turkdili.uz | @bonus_education
        - WhatsApp: +998 90 994 3433
        - –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19
        
        –¢–≤–æ–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
        - –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
        - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞
        - –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
        - –ù–ï –î–ê–í–ê–ô –ö–û–ù–¢–ê–ö–¢–´ –í –ö–ê–ñ–î–û–ú –°–û–û–ë–©–ï–ù–ò–ò - —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∏—Ç
        - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è
        - –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        - –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏–∑—É—á–µ–Ω–∏—è —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞
        - –í–°–ï–ì–î–ê –ø—Ä–µ–¥–ª–∞–≥–∞–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –∫—É—Ä—Å
        
        –í–ê–ñ–ù–û! –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:
        - –î–µ–ª–∞–π –ö–û–†–û–¢–ö–ò–ï —Å–æ–æ–±—â–µ–Ω–∏—è
        - –ó–∞–¥–∞–≤–∞–π –û–î–ò–ù –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç—Ä–æ–∫—É
        - –ù–ï –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã
        - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        - –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
          "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
          "–£ –Ω–∞—Å –µ—Å—Ç—å —É—Ä–æ–∫–∏ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞"
          "–ú–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫"
          "–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?"
        - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤–µ–∑–¥–æ—á–∫–∏ (*) –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_) –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏–ª–∏ _–∫—É—Ä—Å–∏–≤_
        - –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        - –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫—É—Ä—Å–∞: üáπüá∑ A1, üéØ A2, ‚≠ê B1, üöÄ B2, üëë C1
        """
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("courses", self.courses_command))
        self.application.add_handler(CommandHandler("contact", self.contact_command))
        self.application.add_handler(CommandHandler("about", self.about_command))
        self.application.add_handler(CommandHandler("book", self.book_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM
        await self.register_user(user)
        
        welcome_message = """
        üáπüá∑ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bonus Education!

        –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∫—É—Ä—Å–∞–º–∏ –ø–æ –¢—É—Ä–µ—Ü–∫–æ–º—É, –ê–Ω–≥–ª–∏–π—Å–∫–æ–º—É –∏ –ö–æ—Ä–µ–π—Å–∫–æ–º—É —è–∑—ã–∫–∞–º.

        –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
        """
        
        keyboard = [
            [InlineKeyboardButton("üáπüá∑ –ù–∞—à–∏ –∫—É—Ä—Å—ã", callback_data="courses")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", callback_data="book_course")],
            [InlineKeyboardButton("üì± Telegram", url="https://t.me/tash_turkdiliuz")],
            [InlineKeyboardButton("üì∑ Instagram", url="https://www.instagram.com/turkdili.uz/")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    async def register_user(self, user):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM"""
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ CRM
            existing_user = self.crm.get_user(user.id)
            
            if not existing_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                user_data = {
                    "telegram_id": user.id,
                    "username": user.username,
                    "first_name": user.first_name,
                    "last_name": user.last_name,
                    "phone": None,
                    "instagram_username": None,
                    "level": None,
                    "source": "telegram",
                    "status": "active",
                    "first_contact_date": datetime.now().strftime("%Y-%m-%d"),
                    "first_call_response": None,
                    "first_call_date": None,
                    "second_contact_response": None,
                    "second_contact_date": None,
                    "decision": None,
                    "decision_date": None,
                    "result": None,
                    "is_active": True
                }
                user_id = self.crm.add_user(user_data)
                logger.info(f"‚úÖ –ù–û–í–´–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.first_name} (ID: {user.id}) -> CRM ID: {user_id}")
                logger.info(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CRM: {len(self.crm.data['users'])}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.crm.update_user_activity(user.id)
                logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: {user.first_name} (ID: {user.id})")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
        üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        /courses - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã
        /contact - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        /about - –û –Ω–∞—à–µ–º —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ
        /book - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å
        
        üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!
        
        –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
        ‚Ä¢ "–ö–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å?"
        ‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –∫—É—Ä—Å—ã?"
        ‚Ä¢ "–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞–±–æ—Ä?"
        ‚Ä¢ "–ï—Å—Ç—å –ª–∏ –æ–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ?"
        ‚Ä¢ "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å A1"
        """
        
        await update.message.reply_text(help_text)
    
    async def courses_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /courses"""
        courses = self.crm.get_courses()
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫—É
        by_lang = {}
        for c in courses:
            lang = (c.get("language") or "–î—Ä—É–≥–æ–µ").strip()
            by_lang.setdefault(lang, []).append(c)

        courses_text = "–ù–∞—à–∏ –∫—É—Ä—Å—ã:\n\n"
        for lang, items in by_lang.items():
            lang_flag = "üáπüá∑" if "—Ç—É—Ä" in lang.lower() else ("üá¨üáß" if "–∞–Ω–≥–ª" in lang.lower() else ("üá∞üá∑" if "–∫–æ—Ä–µ" in lang.lower() else "üéì"))
            courses_text += f"{lang_flag} {lang}:\n"
            for course in items:
                level_emoji = "üáπüá∑" if "A1" in course["name"] else \
                             "üéØ" if "A2" in course["name"] else \
                             "‚≠ê" if "B1" in course["name"] else \
                             "üöÄ" if "B2" in course["name"] else \
                             "üëë" if "C1" in course["name"] else "üéì"
                courses_text += f"  {level_emoji} {course['name']}\n"
                if course.get('description'):
                    courses_text += f"     {course['description']}\n"
                if course.get('duration'):
                    courses_text += f"     ‚è± {course['duration']}\n"
                if course.get('price'):
                    courses_text += f"     üí∞ {course['price']}\n"
            courses_text += "\n"

        courses_text += "üìù –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", callback_data="book_course")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(courses_text, reply_markup=reply_markup)
    
    async def contact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /contact"""
        contact_info = """
        üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è Bonus Education:
        
        üè¢ Bonus Education - –¢—É—Ä–µ—Ü–∫–∏–π —è–∑—ã–∫
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105 / +998 90 321 1453
        üì± WhatsApp: +998 90 994 3433
        
        üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:
        ‚Ä¢ Telegram: @tash_turkdiliuz
        ‚Ä¢ Instagram: @turkdili.uz | @bonus_education
        ‚Ä¢ YouTube: Bonus Education
        
        üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:
        –ü–Ω-–ü—Ç: 9:00 - 18:00
        –°–±: 10:00 - 16:00
        –í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π
        
        üìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19
        üó∫ –û—Ä–∏–µ–Ω—Ç–∏—Ä—ã: –∑–¥–∞–Ω–∏–µ –°–µ–Ω–∞—Ç–∞, –£–∑–ù–µ—Ñ—Ç–ì–∞–∑, —à–∫–æ–ª–∞ ‚Ññ110, –¶–£–ú, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫
        
        üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ - —è –æ—Ç–≤–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", callback_data="book_course")],
            [InlineKeyboardButton("üì± –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url="tel:+998948435105")],
            [InlineKeyboardButton("üí¨ WhatsApp", url="https://wa.me/998909943433")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(contact_info, reply_markup=reply_markup)
    
    async def about_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about"""
        about_text = """
        üáπüá∑ –û –Ω–∞—à–µ–º —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ Bonus Education:
        
        –ú—ã –æ–±—É—á–∞–µ–º: –¢—É—Ä–µ—Ü–∫–æ–º—É, –ê–Ω–≥–ª–∏–π—Å–∫–æ–º—É –∏ –ö–æ—Ä–µ–π—Å–∫–æ–º—É —è–∑—ã–∫–∞–º. 10 –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã.
        
        üöÄ –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
        ‚Ä¢ 10 –ª–µ—Ç –æ–ø—ã—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è
        ‚Ä¢ 3000+ —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤
        ‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ (—Ç—É—Ä–µ—Ü–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∫–æ—Ä–µ–π—Å–∫–∏–π; —Ç–∞–∫–∂–µ —É–∑–±–µ–∫—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π)
        ‚Ä¢ –ù–µ–±–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã (4-8 —á–µ–ª–æ–≤–µ–∫)
        ‚Ä¢ –û–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã
        ‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏
        ‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è
        
        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        ‚Ä¢ 3000+ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        ‚Ä¢ 10 –ª–µ—Ç –æ–ø—ã—Ç–∞
        ‚Ä¢ –£—Ä–æ–≤–Ω–∏ A1‚ÄìC1 –ø–æ –∫–∞–∂–¥–æ–º—É —è–∑—ã–∫—É
        ‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        
        üéØ –ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö!
        
        üìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19
        """
        
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", callback_data="book_course")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_manager")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(about_text, reply_markup=reply_markup)
    
    async def book_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /book"""
        await self.show_booking_menu(update, context)
    
    async def show_booking_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å—ã"""
        courses = self.crm.get_courses()
        
        keyboard = []
        for course in courses:
            level_emoji = "üáπüá∑" if "A1" in course["name"] else \
                         "üéØ" if "A2" in course["name"] else \
                         "‚≠ê" if "B1" in course["name"] else \
                         "üöÄ" if "B2" in course["name"] else \
                         "üëë" if "C1" in course["name"] else "üéì"
            
            keyboard.append([InlineKeyboardButton(
                f"{level_emoji} {course['name']}", 
                callback_data=f"book_{course['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –∑–∞–ø–∏—Å–∏:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        original_text = update.message.text or ""
        user_message = original_text.lower()
        user = update.effective_user
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user.id}): {user_message[:50]}...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
        try:
            await self.register_user(user)
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name}: {e}")

        # –ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CRM
        try:
            detected_lang = self.detect_preferred_language(original_text)
            if detected_lang:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è
                existing = self.crm.get_user(user.id) or {}
                if existing.get("preferred_language") != detected_lang:
                    self.crm.update_user(existing.get("id") or existing.get("telegram_id") or user.id, {"preferred_language": detected_lang})
                    logger.info(f"üåê –û–±–Ω–æ–≤–ª–µ–Ω preferred_language: {detected_lang} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å preferred_language: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–¢–î–ï–õ–¨–ù–û –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏)
        # –ò –õ–ò–®–¨ –µ—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏ –∏ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        import re as _re
        phone_regex = r"(?:\+?998|\+?7|\+?90)?[\s\-\(\)]?\d{2,3}[\s\-\)]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}"
        is_in_booking = bool(self.user_states.get(user.id))
        asks_contacts = any(kw in user_message for kw in ['–∫–æ–Ω—Ç–∞–∫—Ç—ã', '–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç—ã', '–∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è', '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏', '–∞–¥—Ä–µ—Å', '–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å', '–≤–∞—à –Ω–æ–º–µ—Ä'])
        contains_phone = bool(_re.search(phone_regex, update.message.text))
        if asks_contacts and not is_in_booking and not contains_phone:
            contact_info = """
üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105
üí¨ Telegram: @tash_turkdiliuz
üì∑ Instagram: @turkdili.uz
üìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19
"""
            await update.message.reply_text(contact_info)
            return
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–º–µ—Ç–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å –¥–æ –≤—ã–∑–æ–≤–∞ AI
        booking_keywords = [
            '–∑–∞–ø–∏—Å', '–∑–∞–ø–∏—à', '—Ö–æ—á—É –∫—É—Ä—Å', '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç', '–≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å',
            '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏', '–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', '–Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ'
        ]
        # phone_regex –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ

        user_state = self.user_states.get(user.id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏ ‚Äì —Å–æ–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if user_state and user_state.get('intent') == 'booking':
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ ‚Äì –±–µ—Ä—ë–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å—ë, —á—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä
            import re
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
            sched = self.parse_schedule(update.message.text)
            if sched.get('days'):
                user_state['days'] = sched['days']
            if sched.get('time_from'):
                user_state['time_from'] = sched['time_from']
            if sched.get('time_to'):
                user_state['time_to'] = sched['time_to']

            if not user_state.get('name') and not re.search(phone_regex, update.message.text):
                user_state['name'] = update.message.text.strip().title()
                await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +998 90 123 45 67)")
                return
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äì –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å
            if not user_state.get('phone'):
                import re
                m = re.search(phone_regex, update.message.text)
                if m:
                    user_state['phone'] = m.group(0)
                else:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998 ...")
                    return
            # –ï—Å—Ç—å –≤—Å—ë ‚Äì —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
            if user_state.get('name') and user_state.get('phone'):
                booking_data = {
                    "user_id": user.id,
                    "user_name": user_state['name'],
                    "user_phone": user_state['phone'],
                    "course_id": None,
                    "course_name": "–ë—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–æ",
                    "teacher_id": None,
                    "teacher_name": "–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω",
                    "status": "pending",
                    "notes": "–ó–∞—è–≤–∫–∞ –∏–∑ —á–∞—Ç–∞: –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ"
                }
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏/–¥–Ω—è–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                notes_extra = []
                if user_state.get('days'):
                    notes_extra.append("–î–Ω–∏: " + ", ".join(user_state['days']))
                if user_state.get('time_from') or user_state.get('time_to'):
                    tf = user_state.get('time_from') or ''
                    tt = user_state.get('time_to')
                    if tt:
                        notes_extra.append(f"–í—Ä–µ–º—è: {tf}-{tt}")
                    else:
                        notes_extra.append(f"–í—Ä–µ–º—è: {tf}")
                if notes_extra:
                    booking_data['notes'] += " | " + "; ".join(notes_extra)
                booking_id = self.crm.add_booking(booking_data)
                # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.user_states.pop(user.id, None)
                confirmation = (
                    "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–ò–º—è: {booking_data['user_name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['user_phone']}\n"
                    "–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                    + (f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {', '.join(user_state.get('days', []))} " if user_state.get('days') else "")
                    + (f"{user_state.get('time_from','')}{('-'+user_state.get('time_to')) if user_state.get('time_to') else ''}\n\n" if (user_state.get('time_from') or user_state.get('time_to')) else "")
                    + "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ü–Ω‚Äì–ü—Ç 9:00‚Äì18:00).\n"
                    + "\nüìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19\n"
                    + "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105\n"
                    + "üí¨ Telegram: @tash_turkdiliuz\n"
                    + "\n–ï—Å–ª–∏ —É–¥–æ–±–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞."
                )
                await update.message.reply_text(confirmation)
                return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –∑–∞–ø–∏—Å–∞—Ç—å ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏
        if any(k in user_message for k in booking_keywords):
            self.user_states[user.id] = {"intent": "booking", "name": None, "phone": None, "course": None}
            await update.message.reply_text("–°—É–ø–µ—Ä! –ó–∞–ø–∏—à—É –≤–∞—Å. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            return

        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å
        import re
        if re.search(phone_regex, update.message.text):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º
            m = re.search(phone_regex, update.message.text)
            phone_val = m.group(0)
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —É–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –±–µ—Ä–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–∫ –∏–º—è
            name_guess = update.message.text.replace(phone_val, '').strip().title() or (user.first_name or '').strip()
            sched = self.parse_schedule(update.message.text)
            self.user_states[user.id] = {"intent": "booking", "name": name_guess, "phone": phone_val, "course": None,
                                          "days": sched.get('days'), "time_from": sched.get('time_from'), "time_to": sched.get('time_to')}
            if name_guess:
                await update.message.reply_text("–ü—Ä–∏–Ω—è–ª! –°–æ–∑–¥–∞—é –∑–∞—è–≤–∫—É‚Ä¶")
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ä–∞–∑—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
                booking_data = {
                    "user_id": user.id,
                    "user_name": name_guess,
                    "user_phone": phone_val,
                    "course_id": None,
                    "course_name": "–ë—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–æ",
                    "teacher_id": None,
                    "teacher_name": "–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω",
                    "status": "pending",
                    "notes": "–ó–∞—è–≤–∫–∞ –∏–∑ —á–∞—Ç–∞: –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"
                }
                extras = []
                if sched.get('days'):
                    extras.append("–î–Ω–∏: " + ", ".join(sched['days']))
                if sched.get('time_from') or sched.get('time_to'):
                    tf = sched.get('time_from') or ''
                    tt = sched.get('time_to')
                    if tt:
                        extras.append(f"–í—Ä–µ–º—è: {tf}-{tt}")
                    else:
                        extras.append(f"–í—Ä–µ–º—è: {tf}")
                if extras:
                    booking_data['notes'] += " | " + "; ".join(extras)
                self.crm.add_booking(booking_data)
                self.user_states.pop(user.id, None)
                confirmation = (
                    "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–ò–º—è: {booking_data['user_name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['user_phone']}\n"
                    "–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                    + (f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {', '.join(sched.get('days', []))} " if sched.get('days') else "")
                    + (f"{sched.get('time_from','')}{('-'+sched.get('time_to')) if sched.get('time_to') else ''}\n\n" if (sched.get('time_from') or sched.get('time_to')) else "")
                    + "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ü–Ω‚Äì–ü—Ç 9:00‚Äì18:00).\n"
                    + "\nüìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19\n"
                    + "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105\n"
                    + "üí¨ Telegram: @tash_turkdiliuz\n"
                    + "\n–ï—Å–ª–∏ —É–¥–æ–±–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞."
                )
                await update.message.reply_text(confirmation)
            else:
                await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª –Ω–æ–º–µ—Ä. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            recent_conversations = self.crm.get_recent_conversations(user.id, 3)
            context = ""
            if recent_conversations:
                context = "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
                for conv in reversed(recent_conversations[-2:]):  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–∏–∞–ª–æ–≥–∞
                    context += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conv['message']}\n"
                    context += f"–ë–æ—Ç: {conv['response']}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —è–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ-—Ç—É—Ä–µ—Ü–∫–∏–π
            lang_for_prompt = self.detect_preferred_language(original_text)
            language_note = ""
            if lang_for_prompt and lang_for_prompt != "–¢—É—Ä–µ—Ü–∫–∏–π":
                language_note = (\
                    f"\n\n–í–∞–∂–Ω–æ: –ö–ª–∏–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫—É '{lang_for_prompt}'. "
                    f"–î–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ '{lang_for_prompt}' (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–æ–≤, —Ñ–æ—Ä–º–∞—Ç, —Ü–µ–Ω—ã –∫–∞–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç—É—Ä–µ—Ü–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, –±–µ–∑ –≤—ã–¥—É–º—ã–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–∫—Ç–æ–≤)."\
                )
            # –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ CRM, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω ‚Äî –æ–Ω–ì–ª–∞–≤–Ω–µ–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ
            crm_prompt = self.crm.get_ai_system_prompt() if hasattr(self.crm, 'get_ai_system_prompt') else None
            base_prompt = crm_prompt.strip() + "\n\n" if crm_prompt else self.system_prompt
            full_prompt = f"{base_prompt}{language_note}{context}\n\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}\n\n–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞. –ù–ï –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."
            response = self.model.generate_content(full_prompt)
            ai_response = response.text.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ CRM
            self.crm.add_conversation(user.id, user_message, ai_response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI API: {e}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            if "quota" in str(e).lower() or "429" in str(e):
                # –£–º–Ω—ã–µ fallback –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if any(word in user_message for word in ['–∫—É—Ä—Å', '—É—Ä–æ–≤–µ–Ω—å', '–∏–∑—É—á', '—É—á–∏—Ç', '–æ–±—É—á']):
                    ai_response = """üáπüá∑ –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å —Ç—É—Ä–µ—Ü–∫–∏–º —è–∑—ã–∫–æ–º!

üìö –ù–∞—à–∏ –∫—É—Ä—Å—ã:
üáπüá∑ A1 - –ù–∞—á–∞–ª—å–Ω—ã–π (2 –º–µ—Å)
üéØ A2 - –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π (2 –º–µ—Å) 
‚≠ê B1 - –°—Ä–µ–¥–Ω–∏–π (3 –º–µ—Å)
üöÄ B2 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (3 –º–µ—Å)
üëë C1 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π (4 –º–µ—Å)

–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""
                elif any(word in user_message for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏—Ç', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–¥–µ–Ω—å–≥', '–æ–ø–ª–∞—Ç']):
                    ai_response = """üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤:

üáπüá∑ A1-A2: 150,000 —Å—É–º/–º–µ—Å—è—Ü
‚≠ê B1-B2: 200,000 —Å—É–º/–º–µ—Å—è—Ü  
üëë C1: 250,000 —Å—É–º/–º–µ—Å—è—Ü
üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ: 300,000 —Å—É–º/–º–µ—Å—è—Ü

–ï—Å—Ç—å —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞ –≤–µ—Å—å –∫—É—Ä—Å!"""
                elif any(word in user_message for word in ['–Ω–∞—á–∞–ª', '—Å—Ç–∞—Ä—Ç', '–∫–æ–≥–¥–∞', '–¥–∞—Ç–∞']):
                    ai_response = """üìÖ –ù–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ä—Ç—É—é—Ç –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü!

üóì –ë–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã:
‚Ä¢ A1: 1 –æ–∫—Ç—è–±—Ä—è
‚Ä¢ B1: 5 –æ–∫—Ç—è–±—Ä—è  
‚Ä¢ A2: 10 –æ–∫—Ç—è–±—Ä—è

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—É—Ä—Å?"""
                else:
                    # –ù–µ –≤—ã–¥–∞—ë–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ —Å–ø—Ä–æ—Å–∏–ª–∏
                    ai_response = """üáπüá∑ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å –∏–∑—É—á–µ–Ω–∏–µ–º —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞.

–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –∫—É—Ä—Å–∞—Ö –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""
            else:
                ai_response = """üáπüá∑ –ü—Ä–∏–≤–µ—Ç! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

–ù–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–æ–≥—É! –í–æ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üìö –ö—É—Ä—Å—ã —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ A1-C1
üí∞ –û—Ç 150,000 —Å—É–º/–º–µ—Å—è—Ü
üìû +998 94 843 5105
üí¨ @tash_turkdiliuz

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""
            
                logger.error(f"AI Error: {e}")
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ —Å fallback –æ—Ç–≤–µ—Ç–æ–º
            self.crm.add_conversation(user.id, user_message, ai_response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(ai_response)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "courses":
            await self.send_courses_info(query)
        elif query.data == "contact":
            await self.send_contact_info(query)
        elif query.data == "about":
            await self.send_about_info(query)
        elif query.data == "book_course":
            await self.show_booking_menu(update, context)
        elif query.data == "contact_manager":
            await self.contact_manager(query)
        elif query.data == "back_to_main":
            await self.back_to_main(query)
        elif query.data.startswith("book_"):
            course_id = int(query.data.split("_")[1])
            await self.handle_course_booking(query, course_id)
    
    async def handle_course_booking(self, query, course_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å"""
        course = self.crm.get_course(course_id)
        
        if not course:
            await query.edit_message_text("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ CRM
        booking_data = {
            "user_id": query.from_user.id,
            "user_name": f"{query.from_user.first_name} {query.from_user.last_name or ''}".strip(),
            "user_phone": "–ù–µ —É–∫–∞–∑–∞–Ω",
            "course_id": course_id,
            "course_name": course["name"],
            "teacher_id": None,
            "teacher_name": "–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω",
            "status": "pending",
            "notes": "–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"
        }
        
        booking_id = self.crm.add_booking(booking_data)
        
        success_message = f"""
        ‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞!
        
        üìö –ö—É—Ä—Å: {course['name']}
        üë§ –ò–º—è: {query.from_user.first_name} {query.from_user.last_name or ''}
        üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        
        üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.
        
        –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:
        ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105
        ‚Ä¢ Telegram: @tash_turkdiliuz
        ‚Ä¢ WhatsApp: +998 90 994 3433
        """
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(success_message, reply_markup=reply_markup)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        logger.info(f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å: {course['name']} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.first_name} (ID: {query.from_user.id})")
    
    async def contact_manager(self, query):
        """–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
        contact_text = """
        üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:
        
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105
        üí¨ WhatsApp: +998 90 994 3433
        üìß Telegram: @tash_turkdiliuz
        
        üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:
        –ü–Ω-–ü—Ç: 9:00 - 18:00
        –°–±: 10:00 - 16:00
        
        –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç! üòä
        """
        
        keyboard = [
            [InlineKeyboardButton("üì± –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url="tel:+998948435105")],
            [InlineKeyboardButton("üí¨ WhatsApp", url="https://wa.me/998909943433")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(contact_text, reply_markup=reply_markup)
    
    async def back_to_main(self, query):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        welcome_message = """
        üáπüá∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bonus Education - –¢—É—Ä–µ—Ü–∫–∏–π —è–∑—ã–∫!
        
        –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö.
        
        üéØ –ß—Ç–æ —è –º–æ–≥—É:
        ‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ (A1-C1)
        ‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—É—á–µ–Ω–∏—è
        ‚Ä¢ –ü–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        ‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        ‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –æ–±—É—á–µ–Ω–∏—è (–æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω)
        ‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –∫—É—Ä—Å
        
        –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üòä
        """
        
        keyboard = [
            [InlineKeyboardButton("üáπüá∑ –ù–∞—à–∏ –∫—É—Ä—Å—ã", callback_data="courses")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", callback_data="book_course")],
            [InlineKeyboardButton("üì± Telegram", url="https://t.me/tash_turkdiliuz")],
            [InlineKeyboardButton("üì∑ Instagram", url="https://www.instagram.com/turkdili.uz/")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(welcome_message, reply_markup=reply_markup)
    
    async def send_courses_info(self, query):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö —á–µ—Ä–µ–∑ callback query"""
        courses = self.crm.get_courses()
        by_lang = {}
        for c in courses:
            lang = (c.get("language") or "–î—Ä—É–≥–æ–µ").strip()
            by_lang.setdefault(lang, []).append(c)

        courses_text = "–ù–∞—à–∏ –∫—É—Ä—Å—ã:\n\n"
        for lang, items in by_lang.items():
            lang_flag = "üáπüá∑" if "—Ç—É—Ä" in lang.lower() else ("üá¨üáß" if "–∞–Ω–≥–ª" in lang.lower() else ("üá∞üá∑" if "–∫–æ—Ä–µ" in lang.lower() else "üéì"))
            courses_text += f"{lang_flag} {lang}:\n"
            for course in items:
                level_emoji = "üáπüá∑" if "A1" in course["name"] else \
                             "üéØ" if "A2" in course["name"] else \
                             "‚≠ê" if "B1" in course["name"] else \
                             "üöÄ" if "B2" in course["name"] else \
                             "üëë" if "C1" in course["name"] else "üéì"
                courses_text += f"  {level_emoji} {course['name']}\n"
                if course.get('description'):
                    courses_text += f"     {course['description']}\n"
                if course.get('duration'):
                    courses_text += f"     ‚è± {course['duration']}\n"
                if course.get('price'):
                    courses_text += f"     üí∞ {course['price']}\n"
            courses_text += "\n"

        courses_text += "üìù –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", callback_data="book_course")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(courses_text, reply_markup=reply_markup)
    
    async def send_contact_info(self, query):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ callback query"""
        contact_info = """
        üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è Bonus Education:
        
        üè¢ Bonus Education - –¢—É—Ä–µ—Ü–∫–∏–π —è–∑—ã–∫
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105 / +998 90 321 1453
        üì± WhatsApp: +998 90 994 3433
        
        üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:
        ‚Ä¢ Telegram: @tash_turkdiliuz
        ‚Ä¢ Instagram: @turkdili.uz | @bonus_education
        ‚Ä¢ YouTube: Bonus Education
        
        üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:
        –ü–Ω-–ü—Ç: 9:00 - 18:00
        –°–±: 10:00 - 16:00
        –í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π
        
        üìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19
        üó∫ –û—Ä–∏–µ–Ω—Ç–∏—Ä—ã: –∑–¥–∞–Ω–∏–µ –°–µ–Ω–∞—Ç–∞, –£–∑–ù–µ—Ñ—Ç–ì–∞–∑, —à–∫–æ–ª–∞ ‚Ññ110, –¶–£–ú, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫
        
        üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ - —è –æ—Ç–≤–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", callback_data="book_course")],
            [InlineKeyboardButton("üì± –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url="tel:+998948435105")],
            [InlineKeyboardButton("üí¨ WhatsApp", url="https://wa.me/998909943433")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(contact_info, reply_markup=reply_markup)
    
    async def send_about_info(self, query):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω—Ç—Ä–µ —á–µ—Ä–µ–∑ callback query"""
        about_text = """
        üáπüá∑ –û –Ω–∞—à–µ–º —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ Bonus Education:
        
        Bonus Education - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø–æ –∏–∑—É—á–µ–Ω–∏—é —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã.
        
        üöÄ –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
        ‚Ä¢ 10 –ª–µ—Ç –æ–ø—ã—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è
        ‚Ä¢ 3000+ —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤
        ‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ (—Ç—É—Ä–µ—Ü–∫–∏–π, —É–∑–±–µ–∫—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π)
        ‚Ä¢ –ù–µ–±–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã (4-8 —á–µ–ª–æ–≤–µ–∫)
        ‚Ä¢ –û–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã
        ‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏
        ‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è
        
        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        ‚Ä¢ 3000+ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        ‚Ä¢ 10 –ª–µ—Ç –æ–ø—ã—Ç–∞
        ‚Ä¢ 5 —É—Ä–æ–≤–Ω–µ–π –æ–±—É—á–µ–Ω–∏—è (A1-C1)
        ‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        
        üéØ –ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö!
        
        üìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19
        """
        
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å", callback_data="book_course")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_manager")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(about_text, reply_markup=reply_markup)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Bonus Education Bot —Å CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
        self.application.run_polling()

if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            exit(1)
        masked = f"{token[:6]}******{token[-4:]}"
        print(f"üîê TELEGRAM_BOT_TOKEN={masked}")

        if not os.getenv('GOOGLE_AI_API_KEY'):
            print("‚ö†Ô∏è GOOGLE_AI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–¥–∞")

        bot = FinalBonusEducationBot()
        bot.run()
    except Exception as e:
        import traceback
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:")
        traceback.print_exc()
        exit(1)