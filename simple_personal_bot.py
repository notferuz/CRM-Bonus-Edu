#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram
–†–∞–±–æ—Ç–∞–µ—Ç —Å –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º —á–µ—Ä–µ–∑ Telethon
"""

import asyncio
import logging
import os
from datetime import datetime
from dotenv import load_dotenv
from personal_telegram_assistant import PersonalTelegramAssistant

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    try:
        from telethon import TelegramClient, events
        from telethon.sessions import StringSession
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
        api_id = int(os.getenv('TELEGRAM_API_ID'))
        api_hash = os.getenv('TELEGRAM_API_HASH')
        phone_number = os.getenv('TELEGRAM_PHONE_NUMBER')
        
        if not all([api_id, api_hash, phone_number]):
            logger.error("‚ùå –ù–µ –≤—Å–µ Telegram API –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
            return
        
        logger.info(f"üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {phone_number}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = TelegramClient('personal_assistant_session', api_id, api_hash)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant = PersonalTelegramAssistant()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.start(phone=phone_number)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
        me = await client.get_me()
        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''} (@{me.username or '–±–µ–∑ username'})")
        logger.info(f"üÜî –í–∞—à User ID: {me.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Å –≤–∞—à–∏–º User ID
        env_content = ""
        with open('.env', 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        updated = False
        for i, line in enumerate(lines):
            if line.startswith('TELEGRAM_USER_ID='):
                lines[i] = f'TELEGRAM_USER_ID={me.id}\n'
                updated = True
                break
        
        if not updated:
            lines.append(f'TELEGRAM_USER_ID={me.id}\n')
        
        with open('.env', 'w', encoding='utf-8') as f:
            f.writelines(lines)
        
        logger.info("‚úÖ User ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª")
        
        @client.on(events.NewMessage(incoming=True))
        async def handle_new_message(event):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = event.message
                user_data = await event.get_sender()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
                if user_data.bot:
                    return
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ–±—è
                if user_data.id == me.id:
                    return
                
                text = message.text
                if not text:
                    return
                
                logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_data.first_name}: {text[:50]}...")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info = {
                    'id': user_data.id,
                    'first_name': user_data.first_name,
                    'last_name': user_data.last_name,
                    'username': user_data.username
                }
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç" –ø–æ–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
                async with client.action(event.chat_id, 'typing'):
                    response = assistant.process_message(user_info, text)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                await event.reply(response)
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response[:50]}...")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        logger.info("üöÄ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üì± –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.run_until_disconnected()
        
    except ImportError:
        logger.error("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install telethon")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –¥–∞–Ω–Ω—ã—Ö –≤ .env —Ñ–∞–π–ª–µ")

if __name__ == "__main__":
    print("ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Bonus Education")
    print("üì± –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤–∞—à –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
    print("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_PHONE_NUMBER']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
