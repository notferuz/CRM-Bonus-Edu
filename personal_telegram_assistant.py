#!/usr/bin/env python3
"""
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤–∞—à –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
"""

import logging
import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv
import google.generativeai as genai
from simple_crm import SimpleCRM
import json
import re

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google AI
_DEFAULT_GOOGLE_AI_API_KEY = 'AIzaSyDMU1syLbz7kKWozbYIwZ-SPdClpVQ4ako'
genai.configure(api_key=os.getenv('GOOGLE_AI_API_KEY') or _DEFAULT_GOOGLE_AI_API_KEY)

class PersonalTelegramAssistant:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Gemini
        self.model = genai.GenerativeModel('models/gemini-2.0-flash')
        
        # CRM —Å–µ—Ä–≤–∏—Å
        self.crm = SimpleCRM()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.user_states = {}
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        self.system_prompt = """
        –¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É—á–µ–±–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ Bonus Education.

        –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
        1) –û—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü —Ü–µ–Ω—Ç—Ä–∞ (–ø–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞: "—è", "–º—ã").
        2) –ë—ã—Å—Ç—Ä–æ –≤—ã—è—Å–Ω—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        3) –í–µ—Å—Ç–∏ –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é/–∫—É—Ä—Å.

        –ù–∞—à–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –¢—É—Ä–µ—Ü–∫–∏–π üáπüá∑, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß, –ö–æ—Ä–µ–π—Å–∫–∏–π üá∞üá∑.
        –ü–æ–ª–∏—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: –≤—Å–µ–≥–¥–∞ —Ñ–æ–∫—É—Å –Ω–∞ –¢—É—Ä–µ—Ü–∫–æ–º (–∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ). –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ –æ–Ω–∏ –µ—Å—Ç—å, –Ω–æ –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –≤ —Å—Ç–æ—Ä–æ–Ω—É –¢—É—Ä–µ—Ü–∫–æ–≥–æ (–±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 3‚Äì4 –º–µ—Å—è—Ü–∞ –ø—Ä–æ—Ç–∏–≤ 6‚Äì24 –º–µ—Å—è—Ü–µ–≤ —É –¥—Ä. —è–∑—ã–∫–æ–≤, –≤—ã—Å–æ–∫–∞—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã).
        –£—Ä–æ–≤–Ω–∏: A1‚ÄìC1, –≥—Ä—É–ø–ø–æ–≤—ã–µ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ, –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω.
        –û–ø—ã—Ç 10 –ª–µ—Ç, 3000+ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤.

        –ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
        - –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑.
        - –ù–ï –¥–∞–≤–∞–π –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞.
        - –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî —É—Ç–æ—á–Ω–∏, –∫–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¢—É—Ä–µ—Ü–∫–∏–π –∫–∞–∫ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
        - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–æ—Å–∏–ª –ø—Ä–æ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π/–ö–æ—Ä–µ–π—Å–∫–∏–π ‚Äî –¥–∞–π –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¢—É—Ä–µ—Ü–∫–∏–π –∫–∞–∫ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –ø—É—Ç—å, —Å –æ–ø—Ü–∏–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
        - –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –¥–≤–∞–∂–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ ¬´–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ¬ª –∏ ¬´–æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω¬ª). –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞ ‚Äî –Ω–µ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏ –µ—ë —Å–Ω–æ–≤–∞.
        - –¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π, –ø—Ä–æ–¥–∞—é—â–∏–π, –±–µ–∑ –≤–æ–¥—ã.

        –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫/–∑–∞–ø–∏—Å—å.
        """
    
    def detect_preferred_language(self, text: str) -> str | None:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
        if not text:
            return None
        t = text.lower()
        
        if any(k in t for k in ["—Ç—É—Ä–µ—Ü–∫", "turkish", "—Ç—É—Ä–∫ dili", "turk dili", "turk", "üáπüá∑"]):
            return "–¢—É—Ä–µ—Ü–∫–∏–π"
        if any(k in t for k in ["–∞–Ω–≥–ª", "english", "ingliz", "inglizcha", "üá¨üáß", "üá∫üá∏"]):
            return "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
        if any(k in t for k in ["–∫–æ—Ä–µ–π", "korean", "han'guk", "hanguk", "ÌïúÍµ≠", "üá∞üá∑"]):
            return "–ö–æ—Ä–µ–π—Å–∫–∏–π"
        return None
    
    def parse_schedule(self, text: str) -> dict:
        """–ü–∞—Ä—Å–µ—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –¥–Ω–µ–π –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        import re
        t = text.lower()
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        day_aliases = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': ['–ø–Ω', '–ø–æ–Ω', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'],
            '–≤—Ç–æ—Ä–Ω–∏–∫': ['–≤—Ç', '–≤—Ç–æ—Ä', '–≤—Ç–æ—Ä–Ω–∏–∫'],
            '—Å—Ä–µ–¥–∞': ['—Å—Ä', '—Å—Ä–µ–¥', '—Å—Ä–µ–¥–∞'],
            '—á–µ—Ç–≤–µ—Ä–≥': ['—á—Ç', '—á–µ—Ç–≤', '—á–µ—Ç–≤–µ—Ä–≥'],
            '–ø—è—Ç–Ω–∏—Ü–∞': ['–ø—Ç', '–ø—è—Ç–Ω', '–ø—è—Ç–Ω–∏—Ü–∞'],
            '—Å—É–±–±–æ—Ç–∞': ['—Å–±', '—Å—É–±', '—Å—É–±–±–æ—Ç–∞'],
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': ['–≤—Å', '–≤–æ—Å–∫—Ä', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        }
        
        days = []
        for day, keys in day_aliases.items():
            if any(k in t for k in keys):
                days.append(day)
        
        # –í—Ä–µ–º—è
        time_from = time_to = None
        m = re.search(r"(\d{1,2})[\s:\.]?(\d{2})?\s*(?:-|‚Äì|–¥–æ|\-)\s*(\d{1,2})[\s:\.]?(\d{2})?", t)
        if m:
            h1, m1, h2, m2 = m.group(1), m.group(2) or '00', m.group(3), m.group(4) or '00'
            time_from = f"{int(h1):02d}:{int(m1):02d}"
            time_to = f"{int(h2):02d}:{int(m2):02d}"
        else:
            m2 = re.search(r"(\d{1,2})[\s:\.]?(\d{2})", t)
            if m2:
                h, mm = m2.group(1), m2.group(2)
                time_from = f"{int(h):02d}:{int(mm):02d}"
        
        if '–ø–æ—Å–ª–µ –æ–±–µ–¥–∞' in t and not time_from:
            time_from = '16:00'
            
        return {"days": days or None, "time_from": time_from, "time_to": time_to}
    
    async def register_user(self, user_data):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM"""
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.get('first_name', 'Unknown')} (ID: {user_data.get('id')})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ CRM
            existing_user = self.crm.get_user(user_data.get('id'))
            
            if not existing_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info = {
                    "telegram_id": user_data.get('id'),
                    "username": user_data.get('username'),
                    "first_name": user_data.get('first_name'),
                    "last_name": user_data.get('last_name'),
                    "phone": None,
                    "instagram_username": None,
                    "level": None,
                    "source": "telegram_personal",
                    "status": "active",
                    "first_contact_date": datetime.now().strftime("%Y-%m-%d"),
                    "is_active": True
                }
                user_id = self.crm.add_user(user_info)
                logger.info(f"‚úÖ –ù–û–í–´–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data.get('first_name')} (ID: {user_data.get('id')}) -> CRM ID: {user_id}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.crm.update_user_activity(user_data.get('id'))
                logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: {user_data.get('first_name')} (ID: {user_data.get('id')})")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    def process_message(self, user_data, message_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user_id = user_data.get('id')
            user_message = message_text.lower()
            original_text = message_text
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_data.get('first_name', 'Unknown')} (ID: {user_id}): {user_message[:50]}...")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM
            asyncio.create_task(self.register_user(user_data))
            
            # –ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
            try:
                detected_lang = self.detect_preferred_language(original_text)
                if detected_lang:
                    existing = self.crm.get_user(user_id) or {}
                    if existing.get("preferred_language") != detected_lang:
                        self.crm.update_user(existing.get("id") or existing.get("telegram_id") or user_id, {"preferred_language": detected_lang})
                        logger.info(f"üåê –û–±–Ω–æ–≤–ª–µ–Ω preferred_language: {detected_lang} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å preferred_language: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            phone_regex = r"(?:\+?998|\+?7|\+?90)?[\s\-\(\)]?\d{2,3}[\s\-\)]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}"
            is_in_booking = bool(self.user_states.get(user_id))
            asks_contacts = any(kw in user_message for kw in ['–∫–æ–Ω—Ç–∞–∫—Ç—ã', '–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç—ã', '–∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è', '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏', '–∞–¥—Ä–µ—Å', '–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å', '–≤–∞—à –Ω–æ–º–µ—Ä'])
            contains_phone = bool(re.search(phone_regex, message_text))
            
            if asks_contacts and not is_in_booking and not contains_phone:
                contact_info = """üìû –ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105
üí¨ Telegram: @tash_turkdiliuz
üì∑ Instagram: @turkdili.uz
üìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19"""
                return contact_info
            
            # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç, –∫—Ç–æ —Å–æ–∑–¥–∞–ª ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —è–≤–Ω–æ –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
            creator_keywords = [
                '–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª', '–∫—Ç–æ —Å–æ–∑–¥–∞–ª', '—Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª', '—Å–æ–∑–¥–∞—Ç–µ–ª—å', 'who created you', 'your creator'
            ]
            if any(k in user_message for k in creator_keywords):
                reply_creator = "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ Bonus Education."
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–≤–µ—á–∞–µ–º
                try:
                    self.crm.add_conversation(user_id, original_text, reply_creator)
                except Exception:
                    pass
                return reply_creator

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å
            booking_keywords = [
                '–∑–∞–ø–∏—Å', '–∑–∞–ø–∏—à', '—Ö–æ—á—É –∫—É—Ä—Å', '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç', '–≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å',
                '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏', '–ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', '–Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ'
            ]
            
            user_state = self.user_states.get(user_id)
            if not user_state:
                user_state = {}
                self.user_states[user_id] = user_state

            # –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç/—Ä–µ–∂–∏–º/—É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å
            if any(k in user_message for k in ['–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª', '–ø–µ—Ä—Å–æ–Ω–∞–ª—å']):
                user_state['format'] = 'individual'
            if '–≥—Ä—É–ø–ø' in user_message:
                user_state['format'] = 'group'
            if '–æ–Ω–ª–∞–π–Ω' in user_message:
                user_state['mode'] = 'online'
            if '–æ—Ñ–ª–∞–π–Ω' in user_message or '–≤ –∫–ª–∞—Å—Å–µ' in user_message:
                user_state['mode'] = 'offline'
            if re.search(r'\ba\s*1\b|\ba1\b', user_message):
                user_state['level'] = 'A1'
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
            if user_state and user_state.get('intent') == 'booking':
                sched = self.parse_schedule(message_text)
                if sched.get('days'):
                    user_state['days'] = sched['days']
                if sched.get('time_from'):
                    user_state['time_from'] = sched['time_from']
                if sched.get('time_to'):
                    user_state['time_to'] = sched['time_to']
                
                if not user_state.get('name') and not re.search(phone_regex, message_text):
                    user_state['name'] = message_text.strip().title()
                    return "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +998 90 123 45 67)"
                
                if not user_state.get('phone'):
                    m = re.search(phone_regex, message_text)
                    if m:
                        user_state['phone'] = m.group(0)
                    else:
                        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998 ..."
                
                if user_state.get('name') and user_state.get('phone'):
                    booking_data = {
                        "user_id": user_id,
                        "user_name": user_state['name'],
                        "user_phone": user_state['phone'],
                        "course_id": None,
                        "course_name": "–ë—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–æ",
                        "teacher_id": None,
                        "teacher_name": "–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω",
                        "status": "pending",
                        "notes": "–ó–∞—è–≤–∫–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞: –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ"
                    }
                    
                    notes_extra = []
                    if user_state.get('days'):
                        notes_extra.append("–î–Ω–∏: " + ", ".join(user_state['days']))
                    if user_state.get('time_from') or user_state.get('time_to'):
                        tf = user_state.get('time_from') or ''
                        tt = user_state.get('time_to')
                        if tt:
                            notes_extra.append(f"–í—Ä–µ–º—è: {tf}-{tt}")
                        else:
                            notes_extra.append(f"–í—Ä–µ–º—è: {tf}")
                    if notes_extra:
                        booking_data['notes'] += " | " + "; ".join(notes_extra)
                    
                    booking_id = self.crm.add_booking(booking_data)
                    self.user_states.pop(user_id, None)
                    
                    confirmation = (
                        "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                        f"–ò–º—è: {booking_data['user_name']}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['user_phone']}\n"
                        "–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                        + (f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {', '.join(user_state.get('days', []))} " if user_state.get('days') else "")
                        + (f"{user_state.get('time_from','')}{('-'+user_state.get('time_to')) if user_state.get('time_to') else ''}\n\n" if (user_state.get('time_from') or user_state.get('time_to')) else "")
                        + "–Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ü–Ω‚Äì–ü—Ç 9:00‚Äì18:00).\n"
                        + "\nüìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19\n"
                        + "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105\n"
                        + "üí¨ Telegram: @tash_turkdiliuz\n"
                        + "\n–ï—Å–ª–∏ —É–¥–æ–±–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞."
                    )
                    return confirmation
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –∑–∞–ø–∏—Å–∞—Ç—å
            if any(k in user_message for k in booking_keywords):
                self.user_states[user_id] = {"intent": "booking", "name": None, "phone": None, "course": None}
                return "–°—É–ø–µ—Ä! –ó–∞–ø–∏—à—É –≤–∞—Å. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
            
            # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if re.search(phone_regex, message_text):
                m = re.search(phone_regex, message_text)
                phone_val = m.group(0)
                name_guess = message_text.replace(phone_val, '').strip().title() or (user_data.get('first_name') or '').strip()
                sched = self.parse_schedule(message_text)
                self.user_states[user_id] = {"intent": "booking", "name": name_guess, "phone": phone_val, "course": None,
                                              "days": sched.get('days'), "time_from": sched.get('time_from'), "time_to": sched.get('time_to')}
                
                if name_guess:
                    booking_data = {
                        "user_id": user_id,
                        "user_name": name_guess,
                        "user_phone": phone_val,
                        "course_id": None,
                        "course_name": "–ë—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–æ",
                        "teacher_id": None,
                        "teacher_name": "–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω",
                        "status": "pending",
                        "notes": "–ó–∞—è–≤–∫–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞: –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"
                    }
                    
                    extras = []
                    if sched.get('days'):
                        extras.append("–î–Ω–∏: " + ", ".join(sched['days']))
                    if sched.get('time_from') or sched.get('time_to'):
                        tf = sched.get('time_from') or ''
                        tt = sched.get('time_to')
                        if tt:
                            extras.append(f"–í—Ä–µ–º—è: {tf}-{tt}")
                        else:
                            extras.append(f"–í—Ä–µ–º—è: {tf}")
                    if extras:
                        booking_data['notes'] += " | " + "; ".join(extras)
                    
                    self.crm.add_booking(booking_data)
                    self.user_states.pop(user_id, None)
                    
                    confirmation = (
                        "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                        f"–ò–º—è: {booking_data['user_name']}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['user_phone']}\n"
                        "–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                        + (f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {', '.join(sched.get('days', []))} " if sched.get('days') else "")
                        + (f"{sched.get('time_from','')}{('-'+sched.get('time_to')) if sched.get('time_to') else ''}\n\n" if (sched.get('time_from') or sched.get('time_to')) else "")
                        + "–Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ü–Ω‚Äì–ü—Ç 9:00‚Äì18:00).\n"
                        + "\nüìç –ê–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–æ–±–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä, 19\n"
                        + "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +998 94 843 5105 / +998 93 843 5105\n"
                        + "üí¨ Telegram: @tash_turkdiliuz\n"
                        + "\n–ï—Å–ª–∏ —É–¥–æ–±–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞."
                    )
                    return confirmation
                else:
                    return "–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª –Ω–æ–º–µ—Ä. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è."
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
            try:
                recent_conversations = self.crm.get_recent_conversations(user_id, 3)
                context = ""
                if recent_conversations:
                    context = "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
                    for conv in reversed(recent_conversations[-2:]):
                        context += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conv['message']}\n"
                        context += f"–ë–æ—Ç: {conv['response']}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å –Ω–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–ª–∞ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
                known_prefs = []
                if user_state.get('level'):
                    known_prefs.append(f"—É—Ä–æ–≤–µ–Ω—å: {user_state['level']}")
                if user_state.get('format'):
                    known_prefs.append(f"—Ñ–æ—Ä–º–∞—Ç: {'–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ' if user_state['format']=='individual' else '–≥—Ä—É–ø–ø–∞'}")
                if user_state.get('mode'):
                    known_prefs.append(f"—Ä–µ–∂–∏–º: {'–æ–Ω–ª–∞–π–Ω' if user_state['mode']=='online' else '–æ—Ñ–ª–∞–π–Ω'}")
                prefs_note = ("\n\n–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: " + ", ".join(known_prefs)) if known_prefs else ""

                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ CRM –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–¥—Å–∫–∞–∑–∫—É,
                # —á—Ç–æ–±—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ —É–ø–æ–º–∏–Ω–∞–ª –¢—É—Ä–µ—Ü–∫–∏–π/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π/–ö–æ—Ä–µ–π—Å–∫–∏–π, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω
                available_langs = []
                try:
                    for c in self.crm.get_courses():
                        lng = (c.get("language") or "").strip()
                        if lng and lng not in available_langs:
                            available_langs.append(lng)
                except Exception:
                    pass

                lang_for_prompt = self.detect_preferred_language(original_text)
                language_note = ""
                if lang_for_prompt and lang_for_prompt != "–¢—É—Ä–µ—Ü–∫–∏–π":
                    language_note = (
                        f"\n\n–í–∞–∂–Ω–æ: –ö–ª–∏–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫—É '{lang_for_prompt}'. "
                        f"–î–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ '{lang_for_prompt}' (—É—Ä–æ–≤–Ω–∏ A1‚ÄìC1, —Ñ–æ—Ä–º–∞—Ç—ã, –±–µ–∑ –≤—ã–¥—É–º—ã–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤)."
                    )
                elif available_langs:
                    language_note = (
                        "\n\n–í–∞–∂–Ω–æ: –í —Ü–µ–Ω—Ç—Ä–µ –µ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —è–∑—ã–∫–∞–º: "
                        + ", ".join(available_langs)
                        + ". –ï—Å–ª–∏ —è–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –≤–Ω–∞—á–∞–ª–µ —É—Ç–æ—á–Ω–∏ —è–∑—ã–∫ (–¢—É—Ä–µ—Ü–∫–∏–π/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π/–ö–æ—Ä–µ–π—Å–∫–∏–π), –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–π —É—Ä–æ–≤–Ω–∏ A1‚ÄìC1 –∏ —Ñ–æ—Ä–º–∞—Ç—ã."
                    )
                
                # CRM system prompt –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ
                crm_prompt = self.crm.get_ai_system_prompt() if hasattr(self.crm, 'get_ai_system_prompt') else None
                base_prompt = (crm_prompt.strip() + "\n\n") if crm_prompt else self.system_prompt
                full_prompt = f"{base_prompt}{language_note}{prefs_note}{context}\n\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}\n\n–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞. –ù–ï –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ù–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
                response = self.model.generate_content(full_prompt)
                ai_response = response.text.strip()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ CRM
                self.crm.add_conversation(user_id, user_message, ai_response)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI API: {e}")
                
                # Fallback –æ—Ç–≤–µ—Ç—ã
                if any(word in user_message for word in ['–∫—É—Ä—Å', '—É—Ä–æ–≤–µ–Ω—å', '–∏–∑—É—á', '—É—á–∏—Ç', '–æ–±—É—á']):
                    ai_response = """üáπüá∑ –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å —Ç—É—Ä–µ—Ü–∫–∏–º —è–∑—ã–∫–æ–º!

üìö –ú–æ–∏ –∫—É—Ä—Å—ã:
üáπüá∑ A1 - –ù–∞—á–∞–ª—å–Ω—ã–π (2 –º–µ—Å)
üéØ A2 - –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π (2 –º–µ—Å) 
‚≠ê B1 - –°—Ä–µ–¥–Ω–∏–π (3 –º–µ—Å)
üöÄ B2 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (3 –º–µ—Å)
üëë C1 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π (4 –º–µ—Å)

–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""
                elif any(word in user_message for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏—Ç', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–¥–µ–Ω—å–≥', '–æ–ø–ª–∞—Ç']):
                    ai_response = """üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤:

üáπüá∑ A1-A2: 150,000 —Å—É–º/–º–µ—Å—è—Ü
‚≠ê B1-B2: 200,000 —Å—É–º/–º–µ—Å—è—Ü  
üëë C1: 250,000 —Å—É–º/–º–µ—Å—è—Ü
üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ: 300,000 —Å—É–º/–º–µ—Å—è—Ü

–ï—Å—Ç—å —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞ –≤–µ—Å—å –∫—É—Ä—Å!"""
                elif any(word in user_message for word in ['–Ω–∞—á–∞–ª', '—Å—Ç–∞—Ä—Ç', '–∫–æ–≥–¥–∞', '–¥–∞—Ç–∞']):
                    ai_response = """üìÖ –ù–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ä—Ç—É—é—Ç –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü!

üóì –ë–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã:
‚Ä¢ A1: 1 –æ–∫—Ç—è–±—Ä—è
‚Ä¢ B1: 5 –æ–∫—Ç—è–±—Ä—è  
‚Ä¢ A2: 10 –æ–∫—Ç—è–±—Ä—è

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—É—Ä—Å?"""
                else:
                    ai_response = (
                        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–ª–∞–¥–µ–ª–µ—Ü Bonus Education. "
                        "–£ –Ω–∞—Å –µ—Å—Ç—å –∫—É—Ä—Å—ã –¢—É—Ä–µ—Ü–∫–æ–≥–æ üáπüá∑, –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ üá¨üáß –∏ –ö–æ—Ä–µ–π—Å–∫–æ–≥–æ üá∞üá∑ (—É—Ä–æ–≤–Ω–∏ A1‚ÄìC1, –≥—Ä—É–ø–ø—ã/–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω). "
                        "–ö–∞–∫–æ–π —è–∑—ã–∫ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?"
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ —Å fallback –æ—Ç–≤–µ—Ç–æ–º
                self.crm.add_conversation(user_id, user_message, ai_response)
            
            return ai_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    assistant = PersonalTelegramAssistant()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user = {
        "id": 123456789,
        "first_name": "–¢–µ—Å—Ç",
        "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "username": "test_user"
    }
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∏–∑—É—á–∏—Ç—å —Ç—É—Ä–µ—Ü–∫–∏–π —è–∑—ã–∫"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    response = assistant.process_message(test_user, test_message)
    print(f"–û—Ç–≤–µ—Ç: {response}")
