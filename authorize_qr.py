#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥ (–±–µ–∑ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –≤—Ä—É—á–Ω—É—é)

–®–∞–≥–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:
1) –û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ü—Ä–∏–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–µ—Å–∫—Ç–æ–ø–∞
2) –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
"""

import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

async def main():
    try:
        from telethon import TelegramClient

        api_id = int(os.getenv('TELEGRAM_API_ID'))
        api_hash = os.getenv('TELEGRAM_API_HASH')

        if not all([api_id, api_hash]):
            print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_API_ID/TELEGRAM_API_HASH –≤ .env")
            return

        client = TelegramClient('personal_assistant_session', api_id, api_hash)
        await client.connect()

        if await client.is_user_authorized():
            me = await client.get_me()
            print(f"‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: {me.first_name} {me.last_name or ''} (@{me.username or '‚Äî'})")
            print(f"üÜî User ID: {me.id}")
        else:
            print("üì∏ –ì–æ—Ç–æ–≤–ª—é QR –¥–ª—è –≤—Ö–æ–¥–∞‚Ä¶")
            qr_login = await client.qr_login()

            # –ü–µ—á–∞—Ç–∞–µ–º QR –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –º–æ–¥—É–ª—å qrcode
            try:
                import qrcode
                qr_obj = qrcode.QRCode(border=1)
                qr_obj.add_data(qr_login.url)
                qr_obj.make(fit=True)
                print("\n–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR –≤ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ü—Ä–∏–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–µ—Å–∫—Ç–æ–ø–∞:\n")
                qr_obj.print_ascii(invert=True)
                print("")
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ—Ç qrcode, –ø–µ—á–∞—Ç–∞–µ–º URL
                print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–µ—á–∞—Ç–∞—é URL:")
                print(qr_login.url)
                print("–û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ü—Ä–∏–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–µ—Å–∫—Ç–æ–ø–∞ ‚Üí –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ URL –∫–∞–∫ QR –Ω–∞ —ç–∫—Ä–∞–Ω–µ.")

            # –ñ–¥—ë–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–ø–æ–∫–∞ QR –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω)
            print("‚åõ –û–∂–∏–¥–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞‚Ä¶")
            await qr_login.wait()

            me = await client.get_me()
            print(f"\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''} (@{me.username or '‚Äî'})")
            print(f"üÜî User ID: {me.id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º TELEGRAM_USER_ID –≤ .env
            try:
                with open('.env', 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                key = 'TELEGRAM_USER_ID='
                updated = False
                for i, line in enumerate(lines):
                    if line.startswith(key):
                        lines[i] = f'{key}{me.id}\n'
                        updated = True
                        break
                if not updated:
                    lines.append(f'{key}{me.id}\n')
                with open('.env', 'w', encoding='utf-8') as f:
                    f.writelines(lines)
                print("‚úÖ TELEGRAM_USER_ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ .env")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å USER_ID –≤ .env: {e}")

        await client.disconnect()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    print("ü§ñ –í—Ö–æ–¥ –≤ Telegram —á–µ—Ä–µ–∑ QR")
    print("–ï—Å–ª–∏ QR –Ω–µ –≤–∏–¥–µ–Ω, —è –≤—ã–≤–µ–¥—É URL. –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ Telegram ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
    asyncio.run(main())


