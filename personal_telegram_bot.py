#!/usr/bin/env python3
"""
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
–†–∞–±–æ—Ç–∞–µ—Ç —Å –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º —á–µ—Ä–µ–∑ Telegram API
"""

import asyncio
import logging
import os
import json
from datetime import datetime
from dotenv import load_dotenv
from personal_telegram_assistant import PersonalTelegramAssistant
import aiohttp
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PersonalTelegramBot:
    def __init__(self):
        # API –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
        self.api_id = os.getenv('TELEGRAM_API_ID')
        self.api_hash = os.getenv('TELEGRAM_API_HASH')
        self.phone_number = os.getenv('TELEGRAM_PHONE_NUMBER')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all([self.api_id, self.api_hash, self.phone_number]):
            logger.error("‚ùå –ù–µ –≤—Å–µ Telegram API –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
            logger.error("–ù—É–∂–Ω—ã: TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE_NUMBER")
            raise ValueError("–ù–µ –≤—Å–µ Telegram API –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        self.assistant = PersonalTelegramAssistant()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        self.session_file = "telegram_session.json"
        self.session_data = self.load_session()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π update_id
        self.last_update_id = self.session_data.get('last_update_id', 0)
        
        logger.info("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_session(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        try:
            if os.path.exists(self.session_file):
                with open(self.session_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")
        
        return {
            'last_update_id': 0,
            'authorized': False
        }
    
    def save_session(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        try:
            with open(self.session_file, 'w', encoding='utf-8') as f:
                json.dump(self.session_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            url = f"https://api.telegram.org/bot{os.getenv('TELEGRAM_BOT_TOKEN')}/getUpdates"
            params = {
                'offset': self.last_update_id + 1,
                'timeout': 30
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('result', [])
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status}")
                        return []
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            url = f"https://api.telegram.org/bot{os.getenv('TELEGRAM_BOT_TOKEN')}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def process_message(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            message = update.get('message', {})
            if not message:
                return
            
            chat_id = message.get('chat', {}).get('id')
            user_data = message.get('from', {})
            text = message.get('text', '')
            
            if not all([chat_id, user_data, text]):
                return
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
            if user_data.get('is_bot', False):
                return
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ–±—è (–µ—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç)
            if user_data.get('id') == int(os.getenv('TELEGRAM_USER_ID', '0')):
                return
            
            logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_data.get('first_name', 'Unknown')}: {text[:50]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            response = self.assistant.process_message(user_data, text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self.send_message(chat_id, response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ Telegram AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
        logger.info("üì± –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                updates = await self.get_updates()
                
                for update in updates:
                    update_id = update.get('update_id', 0)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID
                    if update_id > self.last_update_id:
                        self.last_update_id = update_id
                        self.session_data['last_update_id'] = update_id
                        self.save_session()
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.process_message(update)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        logger.info("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telethon (–±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è)
class PersonalTelegramBotTelethon:
    def __init__(self):
        try:
            from telethon import TelegramClient, events
            from telethon.sessions import StringSession
            
            self.api_id = os.getenv('TELEGRAM_API_ID')
            self.api_hash = os.getenv('TELEGRAM_API_HASH')
            self.phone_number = os.getenv('TELEGRAM_PHONE_NUMBER')
            self.session_string = os.getenv('TELEGRAM_SESSION_STRING')
            
            if not all([self.api_id, self.api_hash, self.phone_number]):
                raise ValueError("–ù–µ –≤—Å–µ Telegram API –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            if self.session_string:
                self.client = TelegramClient(StringSession(self.session_string), self.api_id, self.api_hash)
            else:
                self.client = TelegramClient('personal_assistant', self.api_id, self.api_hash)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            self.assistant = PersonalTelegramAssistant()
            
            logger.info("‚úÖ PersonalTelegramBotTelethon –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except ImportError:
            logger.error("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {e}")
            raise
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å Telethon"""
        await self.client.start(phone=self.phone_number)
        
        logger.info("üöÄ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω (Telethon)")
        logger.info(f"üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {await self.client.get_me()}")
        
        @self.client.on(events.NewMessage(incoming=True))
        async def handle_new_message(event):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = event.message
                user_data = await event.get_sender()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
                if user_data.bot:
                    return
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ–±—è
                if user_data.id == (await self.client.get_me()).id:
                    return
                
                text = message.text
                if not text:
                    return
                
                logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_data.first_name}: {text[:50]}...")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info = {
                    'id': user_data.id,
                    'first_name': user_data.first_name,
                    'last_name': user_data.last_name,
                    'username': user_data.username
                }
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                response = self.assistant.process_message(user_info, text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await event.reply(response)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await self.client.run_until_disconnected()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telethon (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
        bot = PersonalTelegramBotTelethon()
        await bot.start()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å Telethon: {e}")
        logger.info("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Bot API
        bot = PersonalTelegramBot()
        await bot.run()


if __name__ == "__main__":
    print("ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Telegram AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Bonus Education")
    print("üì± –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤–∞—à –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
    print("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_PHONE_NUMBER']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("")
        print("üìù –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env:")
        print("TELEGRAM_API_ID=–≤–∞—à_api_id")
        print("TELEGRAM_API_HASH=–≤–∞—à_api_hash")
        print("TELEGRAM_PHONE_NUMBER=+998xxxxxxxxx")
        print("")
        print("üîó –ü–æ–ª—É—á–∏—Ç—å API –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –Ω–∞: https://my.telegram.org/apps")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
